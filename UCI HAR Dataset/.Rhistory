mean(iris.Sepal.Length)
iris
mean(iris$Sepal.Length)
apply(iris,1,mean)
colMeans(iris)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
lapply(iris$Sepal.Length, mean)
lapply(iris, mean)
s <- split(iris, iris$Spcies)
s <- split(iris, iris$Species)
s
lapply(s,mean)
lapply(iris[,1:14], mean)
lapply(iris[,1:4], mean)
s
sapply(s,mean)
s
sapply(s[,1:4],mean)
apply(s[,1:4], 2,mean)
lapply(s[,1:4], 2,mean)
lapply(s[,1:4],mean)
lapply(s,mean)
s
s <- split(iris, iris$Species)
s
s$virginica
apply(s$virginica[,1:4],2,mean)
library(datasets)
data(mtcars)
mtcars
s <- split(mtcars,mtcars$cyl)
s
sapply(s,mean)
sapply(mtcars,cyl,mean)
s <- split(mtcars$mpg,mtcars$cyl)
s
sapply(s,mean)
?mtcars
s <- split(mtcars$hp, mtcars$cyl)
s
sapply(s,mean)
209.21429-82.63636
debug(ls)
ls
ls
mean
debug(mean)
mean
debug(ls)
ls(x)
test <- rnorm(100000)
test
makeVector <- function(x=numeric()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <-- mean
getmean <- function() m
list(set=set, get=get, setmean=setmean, getmean=getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
makeVector(c(1,2,3))
a <- makeVector(c(1,2,3))
a
class(a)
class(a$get)
class(a$set)
a$set(c(4,5,6))
a$get()
a
b < cachemean(a)
b <- cachemean(a)
b
cachemean(test)
a <- makeVector(test)
a
cachemean(a)
a <- sample(3:10, 1)
a
a
?sample
a <- sample(3:10, 1)
a
?cat
dog <- function(name = "Fido", owner = "Bob", barkType = "Woof!", age = 3) {
noOfBarks <- 5
swatWithNewspaper <- function() {
cat("Yelp!\n")
noOfBarks <<- sample(3:10, 1) # random number from 3-10
}
bark <- function() {
for (i in 1:noOfBarks) cat(barkType)
}
info <- function() {
cat(paste("Name: ", name))
cat(paste("\nOwner: ", owner))
cat(paste("\nAge: ", age))
cat("\n")
}
list(swatWithNewspaper = swatWithNewspaper, bark = bark, info = info)
}
snookums <- dog(name = "Snookums", owner = "Granny Smith", barkType = "Yap!", age = 12)
fido <- dog()
fid
fido
snookums$info()
snookums$bark()
fido$bark()
snookums$swatWithNewspaper()
snookums$bark()
snookums$swatWithNewspaper()
snookums$bark()
fido$swatWithNewspaper()
fido$bark()
## It provides an example of using <<- to store in a local function, and reduce the computation
## if a large matrix is given
## makeCacheMatrix function creates a cache for matrix, and it has four functions
## set, get, setInverse, getInverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(){
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## cacheSolve returns the inverse of a given matrix x
## it calls the function makeCacheMatrix, to check whether Inverse has been stored in a cache or not
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()     # query x matrix cache
if(!is.null(m)){        # if there is a cache
message("getting cached data")   # give a message if cached obtained
return(m)           # just return the cache
}
data <- x$get()         # if there is no cache
m <- solve(data,...)    # use solve() to calcuate the inverse of a matrix
x <- setInverse(m)      # save the result back to the cache
m                       # return the result
}
a <- makeCacheMatrix(matrix(1:4,2))
a
a$get()
a$getInverse()
a$set(matrix(5:8,2))
## It provides an example of using <<- to store in a local function, and reduce the computation
## if a large matrix is given
## makeCacheMatrix function creates a cache for matrix, and it has four functions
## set, get, setInverse, getInverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## cacheSolve returns the inverse of a given matrix x
## it calls the function makeCacheMatrix, to check whether Inverse has been stored in a cache or not
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()     # query x matrix cache
if(!is.null(m)){        # if there is a cache
message("getting cached data")   # give a message if cached obtained
return(m)           # just return the cache
}
data <- x$get()         # if there is no cache
m <- solve(data,...)    # use solve() to calcuate the inverse of a matrix
x <- setInverse(m)      # save the result back to the cache
m                       # return the result
}
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
traceback()
## It provides an example of using <<- to store in a local function, and reduce the computation
## if a large matrix is given
## makeCacheMatrix function creates a cache for matrix, and it has four functions
## set, get, setInverse, getInverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
## cacheSolve returns the inverse of a given matrix x
## it calls the function makeCacheMatrix, to check whether Inverse has been stored in a cache or not
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()     # query x matrix cache
if(!is.null(m)){        # if there is a cache
message("getting cached data")   # give a message if cached obtained
return(m)           # just return the cache
}
data <- x$get()         # if there is no cache
m <- solve(data,...)    # use solve() to calcuate the inverse of a matrix
x$setInverse(m)      # save the result back to the cache
m                       # return the result
}
## the following code are used for test followed a thread in the forum
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
x <- rnorm(100)
x
x <- rnorm(20,10,3)
x
summary(x)
x <- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100,exp(log.mu))
summary(y)
plot(x,y)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed
function(p){
params[fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1)
normals <- rnorm(100,1,2)
nLL <- make.NegLogLik(normals)
nLL
ls(nLL)
ls(environment(nLL))
optim(c(mu=0,sigma=1), nLL)$par
optim(c(mu=0,sigma=1), nLL)$par
traceback()
nLL <- make.NegLogLik(normals,c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
nLL <- make.NegLogLik(normals)
optim(c(mu=0,sigma=1),nLL)$par
optim(c(mu=0,sigma=1),nLL)$params
nLL
x <- rbinom(10, 10, 0.5)
x
?rbinom
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x,y)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
library(datasets)
data(cars)
with(cars, plot(speed,dist))
View(cars)
library(lattice)
state <- data.frame(state.x77, region= state.region)
View(state)
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
qplot(displ,hwy, data=mpg)
View(mpg)
View(mpg)
library(ggplot2)
str(mpg)
mpg
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, color= drv)
qplot(displ,hwy,data=mpg, facets = .~drv)
qplot(displ,hwy,data=mpg, facets = .~drv, binwidth=2)
maacs
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
weight
Time
Diet
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
View(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
a <- qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean=rep(1:3, each=4), sd=0.2)
y <- rnorm(12, mean=rep(c(1,2,1),each=4),sd=0.2)
x
y
plot(x,y,col="blue", pch=19, cex=2)
text(x+0.05,y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x=x,y=y)
View(dataFrame)
View(dataFrame)
dist(dataFrame)
distxy <- dist(dataFrame)
hclustering <- hclust(distxy)
plot(hclustering)
set.seed(678910)
for (i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1, prob=0.5)
# if coin is heads add a common pattern
if (coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3), each=5)
}
}
set.seed(12345)
par(mar = rep(0.2,4))
dataMatrix <- matrix(rnorm(400),nrow=40)
image(1:10,1:40, t(dataMatrix)[,nrow(dataMatrix):1])
View(dataMatrix)
View(dataMatrix)
set.seed(678910)
for (i in 1:40){
# flip a coin
coinFlip <- rbinom(1,size=1, prob=0.5)
# if coin is heads add a common pattern
if (coinFlip){
dataMatrix[i,] <- dataMatrix[i,] + rep(c(0,3), each=5)
}
}
View(dataMatrix)
View(dataMatrix)
image(1:10,1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
hh
dataMatrixOrdered <- dataMatrix[hh$order,1]
View(dataMatrix)
par(nfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
par(nfrow=c(1,3))
par(mfrow=c(1,3))
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
image(t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1])
t(dataMatrixOrdered)
t(dataMatrixOrdered)[,nrow(dataMatrixOrdered):1]
nrow(dataMatrixOrdered):1
plot(rowMeans(dataMatrixOrdered),40:1,,xlab="Row Mean", ylab="Row", pch=19)
dataMatrixOrdered <- dataMatrix[hh$order,1]
dataMatrixOrdered
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL-package")
help(installed.packages)
install.packages(c("agricolae", "changepoint", "ggplot2", "MASS", "Matrix", "Rcpp", "swirl", "yaml"))
install.packages('DBI')
install.packages("RMySQL")
install.packages("RMySQL",type="/usr/local/mysql/bin/mysql/")
install.packages("RMySQL",type="/usr/local/mysql/")
install.packages("RMySQL",type="./Downloads/RMySQL_0.9-3.tar.gz")
install.packages("RMySQL",type="./Downloads/RMySQL/")
setwd("~/Documents/DataScience/datasciencecoursera/Cleaning data")
train <- file("./UCI HAR Dataset/train/subject_train")
help(file)
help(files)
d = read.table("./train/subject_train.txt", sep="\t")
setwd("~/Documents/DataScience/datasciencecoursera/Cleaning data/UCI HAR Dataset")
d <- read.table("./train/subject_train.txt", sep="\t")
train_subject <- read.table("./train/subject_train.txt", sep="\t")
train_X <- read.table("./train/X_train.txt", sep="\t")
train_y <- read.table("./train/y_train.txt", sep="\t")
test_subject <- read.table("./test/subject_test.txt", sep="\t")
test_X <- read.table("./test/X_test.txt", sep="\t")
test_y <- read.table("./test/y_test.txt", sep="\t")
df <- data.frame(train_subject,train_X, train_y, test_subject, test_X, test_y)
cbind(train_subject, train_X, train_y)
trainData <- cbind(train_subject, train_X, train_y)
testData <- cbind(test_subject, test_X, test_y)
unique(trainData)
unique(train_subject)
length(unique(train_subject))
dim(unique(train_subject))
dim(unique(test_subject))
dim(test_subject)
dim(test_subject)[1]
test_type <- rep("test", dim(test_subject)[1])
test_type <- rep("test", dim(test_subject)[1])
train_type <- rep("train", dim(train_subject)[1])
trainData <- cbind(train_subject, train_X, train_y, train_type)
testData <- cbind(test_subject, test_X, test_y, test_type)
data <- rbind(trainData, testData)
View(testData)
View(testData)
test_subject <- read.table("./test/subject_test.txt", sep="\t")
test_X <- read.table("./test/X_test.txt", sep=" ")
test_y <- read.table("./test/y_test.txt", sep=" ")
View(test_y)
View(test_y)
View(test_subject)
View(test_subject)
test_X <- read.table("./test/X_test.txt", sep=" ")
help(read.table)
test_X <- read.table("./test/X_test.txt", header=FALSE, sep=" ")
test_X <- read.table("./test/X_test.txt", header=FALSE, sep="\t")
data.frame(test_X)
df <- data.frame(test_X)
head(df)
View(df)
View(df)
test_X <- read.table("./test/X_test.txt", header=FALSE, sep=" ")
View(test_X)
View(test_X)
test_X[1]
test_X <- read.csv("./test/X_test.txt", header=FALSE, sep="")
train_subject <- read.table("./train/subject_train.txt", sep="")
train_X <- read.csv("./train/X_train.txt", sep="")
train_y <- read.table("./train/y_train.txt", sep="")
train_type <- rep("train", dim(train_subject)[1])
trainData <- cbind(train_subject, train_X, train_y, train_type)
train_X <- read.csv("./train/X_train.txt", sep="", header=FALSE)
trainData <- cbind(train_subject, train_X, train_y, train_type)
test_subject <- read.table("./test/subject_test.txt", sep="")
test_X <- read.csv("./test/X_test.txt", header=FALSE, sep="")
test_y <- read.table("./test/y_test.txt", sep="")
test_type <- rep("test", dim(test_subject)[1])
testData <- cbind(test_subject, test_X, test_y, test_type)
data <- rbind(trainData, testData)
data <- rbind(trainData, testData)
help(rbind)
head(testData)
data <- rbind(trainData, testData)
names(trainData)
train(testData)
names(testData)
setwd("~/Documents/DataScience/datasciencecoursera/Cleaning data/UCI HAR Dataset")
train_subject <- read.table("./train/subject_train.txt", sep="")
train_X <- read.csv("./train/X_train.txt", sep="", header=FALSE)
train_y <- read.table("./train/y_train.txt", sep="")
type <- rep("train", dim(train_subject)[1])
trainData <- cbind(train_subject, train_X, train_y, type)
test_subject <- read.table("./test/subject_test.txt", sep="")
test_X <- read.csv("./test/X_test.txt", header=FALSE, sep="")
test_y <- read.table("./test/y_test.txt", sep="")
type <- rep("test", dim(test_subject)[1])
testData <- cbind(test_subject, test_X, test_y, type)
data <- rbind(trainData, testData)
featuresname <- read.table("features.txt", header=FALSE, sep="")
View(featuresname)
View(featuresname)
head(data)
featuresname[2]
names(data)[1] <- paste("SubjectID")
head(data)
featuresname[2:562] <- paste(featuresname[2])
head(data)
featuresname[2]
featuresname
